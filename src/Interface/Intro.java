/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Pojos.Allergen;
import Pojos.User;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

/**
 *
 * @author Pablo
 */
public class Intro extends javax.swing.JFrame {

    /**
     * Creates new form Intro
     */
    
    //private Image background;
    
    public Intro() {
        initComponents();
        this.setSize(new Dimension(450,500));
        setIcon();
        //setBack("Icons/background.jpg");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        signin_button = new javax.swing.JButton();
        signup_button = new javax.swing.JButton();
        username_textfield = new javax.swing.JTextField();
        password_textfield = new javax.swing.JTextField();
        jLabelLRG = new javax.swing.JLabel();
        jLabelUser = new javax.swing.JLabel();
        jLabelPassword = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setDoubleBuffered(false);
        jPanel1.setOpaque(true);

        signin_button.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        signin_button.setText("Sign In");
        signin_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signin_buttonActionPerformed(evt);
            }
        });

        signup_button.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        signup_button.setText("Sign Up");
        signup_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signup_buttonActionPerformed(evt);
            }
        });

        username_textfield.setLocation(250, 200);
        username_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                username_textfieldActionPerformed(evt);
            }
        });

        password_textfield.setLocation(250,250);
        password_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                password_textfieldActionPerformed(evt);
            }
        });

        jLabelLRG.setLocation(150, 150);
        jLabelLRG.setFont(new java.awt.Font("Tempus Sans ITC", 1, 65)); // NOI18N
        jLabelLRG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelLRG.setText("LRG");

        jLabelUser.setLocation(200, 200);
        jLabelUser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelUser.setText("Username");

        jLabelPassword.setLocation(200,250);
        jLabelPassword.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelPassword.setText("Password");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setText("LRG Intellectual property. All Rights Reserved");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelLRG, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelUser)
                                .addGap(31, 31, 31)
                                .addComponent(username_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelPassword)
                                .addGap(34, 34, 34)
                                .addComponent(password_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(signin_button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(signup_button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 123, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(jLabelLRG, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUser))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPassword)
                    .addComponent(password_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(signin_button)
                .addGap(18, 18, 18)
                .addComponent(signup_button)
                .addGap(62, 62, 62)
                .addComponent(jLabel1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void password_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_password_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_password_textfieldActionPerformed

    private void username_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_username_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_username_textfieldActionPerformed

    private void signup_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signup_buttonActionPerformed
        // Sign Up

        UserInfo userFrame = new UserInfo();
        userFrame.setLocationRelativeTo(null);
        userFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_signup_buttonActionPerformed

    private void signin_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signin_buttonActionPerformed
        resetParameters();

        String userName = username_textfield.getText();
        String password = password_textfield.getText();

        if(userName.isEmpty() && password.isEmpty()){
            username_textfield.setBorder(new LineBorder(Color.red,2));
            password_textfield.setBorder(new LineBorder(Color.red,2));
            JOptionPane.showMessageDialog(new JFrame(), "Input Username and Password!!", "Fatal Error",JOptionPane.ERROR_MESSAGE);
        }
        else if (userName.isEmpty()){
            username_textfield.setBorder(new LineBorder(Color.red,2));
            password_textfield.setBorder(new LineBorder(Color.black,1));
            JOptionPane.showMessageDialog(new JFrame(), "Input Username!!","Error",JOptionPane.WARNING_MESSAGE);
        } else if (password.isEmpty()){
            password_textfield.setBorder(new LineBorder(Color.red,2));
            username_textfield.setBorder(new LineBorder(Color.black,1));
            JOptionPane.showMessageDialog(new JFrame(), "Input Password!!","Error",JOptionPane.WARNING_MESSAGE);
        } else {
            boolean exist = checkUser(userName,password);// Comparo con mi texto
            if (exist){

                Clips clipsFrame;
                Allergen allergen = loadAllergenInfo("UserAllergens.txt","data",userName);
                clipsFrame = new Clips(allergen);
                clipsFrame.setLocationRelativeTo(null);
                clipsFrame.setVisible(true);
                this.setVisible(false);
                this.dispose();

            }else{
                username_textfield.setBorder(new LineBorder(Color.red,2));
                password_textfield.setBorder(new LineBorder(Color.red,2));
                JOptionPane.showMessageDialog(new JFrame(), "Incorrect Username or Password!!","Error",JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_signin_buttonActionPerformed
    
    
    public static ArrayList loadAllUsers(String nombreArchivo,String directorio)
    {
        
        ArrayList <User> users = new ArrayList();
        int ultUser;
        
        File archivo;
        
        FileInputStream fileInputStream = null;
        ObjectInputStream objectInputStream = null;

        archivo = new File(directorio,nombreArchivo);
        if(!archivo.exists())
        {
            return users;
        }
        try{

            fileInputStream=new FileInputStream(archivo);
            objectInputStream=new ObjectInputStream(fileInputStream);

            ultUser = (int) objectInputStream.readObject();
            
            for(int i=0;i<ultUser;i++)
            {
                users.add((User)objectInputStream.readObject());
            } 
            
        }catch(IOException | ClassNotFoundException ex)
        {ex.printStackTrace();
        }finally {
            try {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                if (objectInputStream != null) {
                    objectInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
        }/*Finally*/
    return users;
        
    }
    
    public static ArrayList loadAllAllergens(String nombreArchivo,String directorio)
    {
        
        ArrayList <Allergen> allergens = new ArrayList();
        int ultAl;
        
        File archivo;
        
        FileInputStream fileInputStream = null;
        ObjectInputStream objectInputStream = null;

        archivo = new File(directorio,nombreArchivo);
        if(!archivo.exists())
        {
            return allergens;
        }
        try{

            fileInputStream = new FileInputStream(archivo);
            objectInputStream = new ObjectInputStream(fileInputStream);

            ultAl = (int) objectInputStream.readObject();
            
            for(int i=0;i<ultAl;i++)
            {
                allergens.add((Allergen)objectInputStream.readObject());
            } 
            
        }catch(IOException | ClassNotFoundException ex)
        {
            ex.printStackTrace();
        }finally {
            try {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                if (objectInputStream != null) {
                    objectInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
        }
    return allergens;
        
    }
    
    public static Allergen loadAllergenInfo(String nombreArchivo, String directorio, String userName){
        ArrayList<Allergen> allergens = loadAllAllergens(nombreArchivo,directorio);
        Iterator it = allergens.iterator();
        Allergen allergen = null;
        
        while(it.hasNext()){
            allergen = (Allergen)(it.next());
            if(userName.equals(allergen.getUserName())){
                break;
            }
        }
        return allergen;
    }
    
    public static String encodePassword(String passwordToEncode)
    {
        //This method is use to encode the pasword of the Client or Doctor.
        String passwordToHash = passwordToEncode;
        String generatedPassword = null;
        try 
        {
            // Create MessageDigest instance for MD5
            MessageDigest md = MessageDigest.getInstance("MD5");
            //Add password bytes to digest
            md.update(passwordToHash.getBytes());
            //Get the hash's bytes
            byte[] bytes = md.digest();
            //This bytes[] has bytes in decimal format;
            //Convert it to hexadecimal format
            StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            //Get complete hashed password in hex format
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
        }

        return generatedPassword;
    }
             
        
    public static boolean checkUser(String us, String password)
    {
        boolean ans = false;
        User user = null;
        
        ArrayList<User> namePasswords = loadAllUsers("UserPasswords.txt","data");
       
        Iterator it = namePasswords.iterator();
        for(int i = 0; i<namePasswords.size();i++)
        {
            user = (User)it.next();
            if((user.getPassword().equals(encodePassword(password))) && (user.getUserName().equals(us)))
            {
                ans = true;
                break;
            }
        }
        
        return ans;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelLRG;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelUser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField password_textfield;
    private javax.swing.JButton signin_button;
    private javax.swing.JButton signup_button;
    private javax.swing.JTextField username_textfield;
    // End of variables declaration//GEN-END:variables

    private void resetParameters() {
        
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icons/logo_mni.jpg")));
        this.setTitle("LRG");
    }

    /*public void setBack(String imagePath) {
		
		// Construimos la imagen y se la asignamos al atributo background.
		jPanel1.setOpaque(false);
		background = new ImageIcon(imagePath).getImage();
		jPanel1.repaint();
	}
    */
    
}
