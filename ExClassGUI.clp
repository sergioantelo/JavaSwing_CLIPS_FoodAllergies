;DEFTEMPLATES(deftemplate Patient (slot temperature) 
                     (slot spots)
                     (slot rash)
                     (slot sore_throat)
                     (slot innoculated)
                     (slot fever))					 
(deftemplate node-question-answer  (slot type)  (slot value))(deftemplate node	(slot name)	(slot type)	(slot question)	(slot node-yes)	(slot node-no)	(slot answer))					 ;INITIAL FACTS(deffacts Initial(node (name node-0) (type decision) (question "Does the patient have spots (yes or no): ") (node-yes node-1) (node-no node-2))(node (name node-1) (type decision) (question "Has the patient been innoculated for measles (yes or no): ") (node-yes node-X1) (node-no node-X2))(node (name node-X1) (type answer) (answer "Allergy diagnosed from spots and lack of measles "))(node (name node-X2) (type answer) (answer "Measles diagnosed"))(node (name node-2) (type decision) (question "Does the patient have a rash (yes or no): ") (node-yes node-X3) (node-no node-3))(node (name node-X3) (type answer) (answer "Allergy diagnosed from rash"))(node (name node-3) (type decision) (question "Does the patient have a sore throat (yes or no): ") (node-yes node-X4) (node-no node-X5))(node (name node-X4) (type answer) (answer "Flu diagnosed"))(node (name node-X5) (type answer) (answer "No diagnosis possible -- consult human expert"))(node-state node-0)(state question)(node-question-answer)(Patient))					 					 
;DEFRULES(defrule question-in-decision-node?n <- (node-state ?name)	?e <- (state question)	(node (name ?name)(type ?type)(question ?question)(answer ?answer))	?p <- (node-question-answer)=>	(retract ?e)	(retract ?p)	(if(eq ?type decision)then       (assert (node-question-answer (type ?type)(value ?question)))	else	(assert (node-question-answer (type ?type)(value ?answer)))	))(defrule process-if-in-decision-node	?n <- (node-state ?name)	?o <- (option yes)	(node (name ?name)(type decision)(node-yes ?n-yes))         =>	(retract ?n)	(retract ?o)	(assert (node-state ?n-yes))	(assert (state question)))(defrule process-if-no-decision-node  	?n <- (node-state ?name)	?o <- (option no)	(node (name ?name)(type decision)(node-no ?n-no))        =>	(retract ?n)	(retract ?o)	(assert (node-state ?n-no))	(assert (state question)))  (defrule ask-again	?n <- (node-state ?name)	?o <- (option ?option)	(node (name ?name)(type answer))	?p <- (node-question-answer )=>	(retract ?n)	(retract ?p)	(if(eq ?option yes)then		(assert (node-state node-0))		(assert (state question))		(assert (node-question-answer))	else		(assert (node-question-answer (type EXIT)))	)	(retract ?o))
